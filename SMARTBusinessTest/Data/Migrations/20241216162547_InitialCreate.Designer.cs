// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMARTBusinessTest.Data;

#nullable disable

namespace SMARTBusinessTest.Data.Migrations
{
    [DbContext(typeof(EquipmentContractsDbContext))]
    [Migration("20241216162547_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SMARTBusinessTest.Entities.EquipmentUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Unit_Id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("Unit_Amount");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Unit_ContractId");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Unit_EquipmentId");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("SMARTBusinessTest.Entities.PlacementContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Contract_Id");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Contract_FacilityId");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("SMARTBusinessTest.Entities.ProcessEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Equipment_Id");

                    b.Property<int>("Area")
                        .HasColumnType("int")
                        .HasColumnName("Equipment_Area");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Equipment_Code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Equipment_Name");

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("SMARTBusinessTest.Entities.ProductionFacility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Facility_Id");

                    b.Property<int>("Area")
                        .HasColumnType("int")
                        .HasColumnName("Facility_Area");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Facility_Code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Facility_Name");

                    b.HasKey("Id");

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("SMARTBusinessTest.Entities.EquipmentUnit", b =>
                {
                    b.HasOne("SMARTBusinessTest.Entities.PlacementContract", "Contract")
                        .WithMany("EquipmentUnits")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMARTBusinessTest.Entities.ProcessEquipment", "Equipment")
                        .WithMany("Units")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("SMARTBusinessTest.Entities.PlacementContract", b =>
                {
                    b.HasOne("SMARTBusinessTest.Entities.ProductionFacility", "ProductionFacility")
                        .WithMany("Contracts")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionFacility");
                });

            modelBuilder.Entity("SMARTBusinessTest.Entities.PlacementContract", b =>
                {
                    b.Navigation("EquipmentUnits");
                });

            modelBuilder.Entity("SMARTBusinessTest.Entities.ProcessEquipment", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("SMARTBusinessTest.Entities.ProductionFacility", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
